<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>GameED Leaderboard</title>
    <%- include('links.ejs') %>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.5/gsap.min.js"></script>
        <style>
            ::selection {
                color: rgb(0, 0, 0);
                background-color: #6bdb9baf;
            }
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: "Solway";
            }

            body {
                background-color: #0B121F;
                color: #A4B1CD;
                min-height: 100vh;
            }

            .nav {
                background-color: #0b121fa6;
                width: 100%;
                display: flex;
                align-items: center;
                justify-content: space-between;
                padding: 1.8vw 10vw;
                backdrop-filter: blur(5px);
                position: sticky;
                top: 0;
                z-index: 997;
            }

            .container {
                padding: 2rem 10vw;
            }

            .top-players {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 2rem;
                margin-bottom: 4rem;
                padding: 1rem;
            }

            .top-player-card {
                background: rgba(11, 18, 31, 0.8);
                border-radius: 15px;
                padding: 2rem;
                text-align: center;
                cursor: pointer;
                position: relative;
                overflow: hidden;
                transition: transform 0.3s ease;
            }

            .top-player-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 5px;
            }

            .top-player-card.first::before {
                background: gold;
            }

            .top-player-card.second::before {
                background: silver;
            }

            .top-player-card.third::before {
                background: #cd7f32;
            }

            .top-player-card:hover {
                transform: translateY(-5px);
            }

            .top-player-avatar {
                width: 100px;
                height: 100px;
                border-radius: 50%;
                margin: 0 auto 1rem;
                border: 3px solid #53d160;
                overflow: hidden;
            }

            .top-player-avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .trophy {
                position: absolute;
                top: 1rem;
                right: 1rem;
                font-size: 2rem;
            }

            .first .trophy {
                color: gold;
            }

            .second .trophy {
                color: silver;
            }

            .third .trophy {
                color: #cd7f32;
            }

            .leaderboard-table {
                width: 100%;
                border-collapse: collapse;
                background: rgba(11, 18, 31, 0.8);
                border-radius: 15px;
                overflow: hidden;
            }

            .leaderboard-table th {
                background: rgba(83, 209, 96, 0.1);
                padding: 1rem;
                text-align: left;
                font-weight: normal;
            }

            .leaderboard-table tr {
                cursor: pointer;
                transition: background-color 0.3s ease;
            }

            .leaderboard-table tr:hover {
                background: rgba(83, 209, 96, 0.1);
            }

            .leaderboard-table td {
                padding: 1rem;
                border-bottom: 1px solid rgba(164, 177, 205, 0.1);
            }

            .rank-cell {
                width: 80px;
                font-weight: bold;
            }

            .player-cell {
                display: flex;
                align-items: center;
                gap: 1rem;
            }

            .player-avatar {
                width: 40px;
                height: 40px;
                border-radius: 50%;
                overflow: hidden;
            }

            .player-avatar img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .streak-badge {
                display: inline-flex;
                align-items: center;
                gap: 0.3rem;
                background: rgba(83, 209, 96, 0.1);
                padding: 0.3rem 0.6rem;
                border-radius: 12px;
                font-size: 0.9rem;
            }

            .points {
                color: #53d160;
                font-weight: bold;
            }

            .filters {
                margin-bottom: 2rem;
                display: flex;
                gap: 1rem;
            }

            .filter-btn {
                background: rgba(83, 209, 96, 0.1);
                border: none;
                padding: 0.8rem 1.5rem;
                color: #A4B1CD;
                border-radius: 20px;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .filter-btn.active {
                background: #53d160;
                color: white;
            }

            .filter-options {
                display: flex;
                justify-content: space-between;
                margin-bottom: 20px;
            }
            .pagination {
                display: flex;
                justify-content: center;
                margin-top: 20px;
            }
            .pagination button {
                margin: 0 5px;
            }
            .no-data {
                text-align: center;
                color: #888;
                font-style: italic;
            }
        </style>
</head>

<body>
    <%- include('cursor.ejs') %>
        <%- include('navBar.ejs') %>
            <nav class="nav">
                <div class="logo">GameED Leaderboard</div>
            </nav>

            <div class="container">
                <h1>Leaderboard</h1>
                <div class="filter-options">
                    <select id="sortBy">
                        <option value="points">Points</option>
                        <option value="streak.current">Current Streak</option>
                        <option value="streak.highest">Highest Streak</option>
                        <option value="level">Level</option>
                    </select>
                    <select id="orderBy">
                        <option value="desc">Descending</option>
                        <option value="asc">Ascending</option>
                    </select>
                    <select id="regionFilter">
                        <option value="All">All Regions</option>
                        <!-- Regions will be populated dynamically -->
                    </select>
                </div>
                <div class="top-players">
                    <!-- Top 3 players will be displayed here -->
                </div>
                <table class="leaderboard-table">
                    <thead>
                        <tr>
                            <th>Rank</th>
                            <th>User</th>
                            <th>Points</th>
                            <th>Current Streak</th>
                            <th>Highest Streak</th>
                            <th>Level</th>
                            <th>Region</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Leaderboard data will be populated here -->
                    </tbody>
                </table>
                <div class="pagination">
                    <!-- Pagination buttons will be added here -->
                </div>
            </div>

            <script>
            let currentPage = 1;
            let totalPages = 1;

            async function fetchLeaderboard(page = 1) {
                const sortBy = document.getElementById('sortBy').value;
                const orderBy = document.getElementById('orderBy').value;
                const region = document.getElementById('regionFilter').value;

                try {
                    const response = await fetch(`/api/leaderboard?sort=${sortBy}&order=${orderBy}&region=${region}&page=${page}`);
                    const data = await response.json();

                    const leaderboardBody = document.querySelector('.leaderboard-table tbody');
                    leaderboardBody.innerHTML = '';

                    if (data.leaderboard.length === 0) {
                        leaderboardBody.innerHTML = '<tr><td colspan="7" class="no-data">No data available</td></tr>';
                    } else {
                        data.leaderboard.forEach((entry, index) => {
                            const row = `
                                <tr>
                                    <td>${(page - 1) * 20 + index + 1}</td>
                                    <td>${entry.user.username}</td>
                                    <td>${entry.points}</td>
                                    <td>${entry.streak.current}</td>
                                    <td>${entry.streak.highest}</td>
                                    <td>${entry.level}</td>
                                    <td>${entry.region || 'N/A'}</td>
                                </tr>
                            `;
                            leaderboardBody.innerHTML += row;
                        });
                    }

                    // Update top players
                    const topPlayers = document.querySelector('.top-players');
                    topPlayers.innerHTML = '';
                    data.leaderboard.slice(0, 3).forEach((entry, index) => {
                        const playerCard = `
                            <div class="top-player-card ${['first', 'second', 'third'][index]}">
                                <h3>${entry.user.username}</h3>
                                <p>${entry.points} points</p>
                                <p>Level ${entry.level}</p>
                            </div>
                        `;
                        topPlayers.innerHTML += playerCard;
                    });

                    // Update pagination
                    currentPage = data.page;
                    totalPages = data.pages;
                    updatePagination();

                    // Animate new content
                    gsap.from('.leaderboard-table tbody tr', {
                        opacity: 0,
                        y: 20,
                        stagger: 0.05,
                        duration: 0.5
                    });

                    gsap.from('.top-player-card', {
                        opacity: 0,
                        y: 20,
                        stagger: 0.2,
                        duration: 0.5
                    });

                } catch (error) {
                    console.error('Error fetching leaderboard:', error);
                }
            }

            function updatePagination() {
                const pagination = document.querySelector('.pagination');
                pagination.innerHTML = '';

                if (currentPage > 1) {
                    pagination.innerHTML += `<button onclick="fetchLeaderboard(${currentPage - 1})">Previous</button>`;
                }

                pagination.innerHTML += `<span>Page ${currentPage} of ${totalPages}</span>`;

                if (currentPage < totalPages) {
                    pagination.innerHTML += `<button onclick="fetchLeaderboard(${currentPage + 1})">Next</button>`;
                }
            }

            async function populateRegions() {
                try {
                    const response = await fetch('/api/regions');
                    const regions = await response.json();
                    const regionFilter = document.getElementById('regionFilter');
                    regions.forEach(region => {
                        if (region) { // Only add non-empty regions
                            regionFilter.innerHTML += `<option value="${region}">${region}</option>`;
                        }
                    });
                } catch (error) {
                    console.error('Error fetching regions:', error);
                }
            }

            document.addEventListener('DOMContentLoaded', () => {
                fetchLeaderboard();
                populateRegions();

                document.getElementById('sortBy').addEventListener('change', () => fetchLeaderboard());
                document.getElementById('orderBy').addEventListener('change', () => fetchLeaderboard());
                document.getElementById('regionFilter').addEventListener('change', () => fetchLeaderboard());
            });
            </script>
</body>

</html>
